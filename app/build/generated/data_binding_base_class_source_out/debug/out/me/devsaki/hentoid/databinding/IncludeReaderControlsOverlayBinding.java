// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.slider.Slider;
import com.skydoves.submarine.SubmarineView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class IncludeReaderControlsOverlayBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final SubmarineView favouriteMicroMenu;

  @NonNull
  public final ImageView imagePreviewCenter;

  @NonNull
  public final ImageView imagePreviewLeft;

  @NonNull
  public final ImageView imagePreviewRight;

  @NonNull
  public final SubmarineView informationMicroMenu;

  @NonNull
  public final Slider pageSlider;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final Slider slideshowDelaySlider;

  @NonNull
  public final View viewerBottomBg;

  @NonNull
  public final ImageButton viewerFavouriteActionBtn;

  @NonNull
  public final ImageButton viewerGalleryBtn;

  @NonNull
  public final ImageButton viewerInfoBtn;

  @NonNull
  public final ImageButton viewerNextBookBtn;

  @NonNull
  public final TextView viewerPagerLeftTxt;

  @NonNull
  public final TextView viewerPagerRightTxt;

  @NonNull
  public final Toolbar viewerPagerToolbar;

  @NonNull
  public final ImageButton viewerPrevBookBtn;

  private IncludeReaderControlsOverlayBinding(@NonNull ConstraintLayout rootView,
      @NonNull SubmarineView favouriteMicroMenu, @NonNull ImageView imagePreviewCenter,
      @NonNull ImageView imagePreviewLeft, @NonNull ImageView imagePreviewRight,
      @NonNull SubmarineView informationMicroMenu, @NonNull Slider pageSlider,
      @NonNull ProgressBar progressBar, @NonNull Slider slideshowDelaySlider,
      @NonNull View viewerBottomBg, @NonNull ImageButton viewerFavouriteActionBtn,
      @NonNull ImageButton viewerGalleryBtn, @NonNull ImageButton viewerInfoBtn,
      @NonNull ImageButton viewerNextBookBtn, @NonNull TextView viewerPagerLeftTxt,
      @NonNull TextView viewerPagerRightTxt, @NonNull Toolbar viewerPagerToolbar,
      @NonNull ImageButton viewerPrevBookBtn) {
    this.rootView = rootView;
    this.favouriteMicroMenu = favouriteMicroMenu;
    this.imagePreviewCenter = imagePreviewCenter;
    this.imagePreviewLeft = imagePreviewLeft;
    this.imagePreviewRight = imagePreviewRight;
    this.informationMicroMenu = informationMicroMenu;
    this.pageSlider = pageSlider;
    this.progressBar = progressBar;
    this.slideshowDelaySlider = slideshowDelaySlider;
    this.viewerBottomBg = viewerBottomBg;
    this.viewerFavouriteActionBtn = viewerFavouriteActionBtn;
    this.viewerGalleryBtn = viewerGalleryBtn;
    this.viewerInfoBtn = viewerInfoBtn;
    this.viewerNextBookBtn = viewerNextBookBtn;
    this.viewerPagerLeftTxt = viewerPagerLeftTxt;
    this.viewerPagerRightTxt = viewerPagerRightTxt;
    this.viewerPagerToolbar = viewerPagerToolbar;
    this.viewerPrevBookBtn = viewerPrevBookBtn;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static IncludeReaderControlsOverlayBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static IncludeReaderControlsOverlayBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.include_reader_controls_overlay, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static IncludeReaderControlsOverlayBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.favourite_micro_menu;
      SubmarineView favouriteMicroMenu = ViewBindings.findChildViewById(rootView, id);
      if (favouriteMicroMenu == null) {
        break missingId;
      }

      id = R.id.image_preview_center;
      ImageView imagePreviewCenter = ViewBindings.findChildViewById(rootView, id);
      if (imagePreviewCenter == null) {
        break missingId;
      }

      id = R.id.image_preview_left;
      ImageView imagePreviewLeft = ViewBindings.findChildViewById(rootView, id);
      if (imagePreviewLeft == null) {
        break missingId;
      }

      id = R.id.image_preview_right;
      ImageView imagePreviewRight = ViewBindings.findChildViewById(rootView, id);
      if (imagePreviewRight == null) {
        break missingId;
      }

      id = R.id.information_micro_menu;
      SubmarineView informationMicroMenu = ViewBindings.findChildViewById(rootView, id);
      if (informationMicroMenu == null) {
        break missingId;
      }

      id = R.id.page_slider;
      Slider pageSlider = ViewBindings.findChildViewById(rootView, id);
      if (pageSlider == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.slideshow_delay_slider;
      Slider slideshowDelaySlider = ViewBindings.findChildViewById(rootView, id);
      if (slideshowDelaySlider == null) {
        break missingId;
      }

      id = R.id.viewer_bottom_bg;
      View viewerBottomBg = ViewBindings.findChildViewById(rootView, id);
      if (viewerBottomBg == null) {
        break missingId;
      }

      id = R.id.viewer_favourite_action_btn;
      ImageButton viewerFavouriteActionBtn = ViewBindings.findChildViewById(rootView, id);
      if (viewerFavouriteActionBtn == null) {
        break missingId;
      }

      id = R.id.viewer_gallery_btn;
      ImageButton viewerGalleryBtn = ViewBindings.findChildViewById(rootView, id);
      if (viewerGalleryBtn == null) {
        break missingId;
      }

      id = R.id.viewer_info_btn;
      ImageButton viewerInfoBtn = ViewBindings.findChildViewById(rootView, id);
      if (viewerInfoBtn == null) {
        break missingId;
      }

      id = R.id.viewer_next_book_btn;
      ImageButton viewerNextBookBtn = ViewBindings.findChildViewById(rootView, id);
      if (viewerNextBookBtn == null) {
        break missingId;
      }

      id = R.id.viewer_pager_left_txt;
      TextView viewerPagerLeftTxt = ViewBindings.findChildViewById(rootView, id);
      if (viewerPagerLeftTxt == null) {
        break missingId;
      }

      id = R.id.viewer_pager_right_txt;
      TextView viewerPagerRightTxt = ViewBindings.findChildViewById(rootView, id);
      if (viewerPagerRightTxt == null) {
        break missingId;
      }

      id = R.id.viewer_pager_toolbar;
      Toolbar viewerPagerToolbar = ViewBindings.findChildViewById(rootView, id);
      if (viewerPagerToolbar == null) {
        break missingId;
      }

      id = R.id.viewer_prev_book_btn;
      ImageButton viewerPrevBookBtn = ViewBindings.findChildViewById(rootView, id);
      if (viewerPrevBookBtn == null) {
        break missingId;
      }

      return new IncludeReaderControlsOverlayBinding((ConstraintLayout) rootView,
          favouriteMicroMenu, imagePreviewCenter, imagePreviewLeft, imagePreviewRight,
          informationMicroMenu, pageSlider, progressBar, slideshowDelaySlider, viewerBottomBg,
          viewerFavouriteActionBtn, viewerGalleryBtn, viewerInfoBtn, viewerNextBookBtn,
          viewerPagerLeftTxt, viewerPagerRightTxt, viewerPagerToolbar, viewerPrevBookBtn);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
