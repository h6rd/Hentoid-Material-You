// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;
import me.devsaki.hentoid.views.CircularProgressView;

public final class ActivityBaseWebBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ImageView animatedCheck;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final ConstraintLayout bottomAlert;

  @NonNull
  public final ImageView bottomAlertCloseBtn;

  @NonNull
  public final ImageView bottomAlertIcon;

  @NonNull
  public final TextView bottomAlertTxt;

  @NonNull
  public final BottomNavigationView bottomNavigation;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final CircularProgressView quickDlFeedback;

  @NonNull
  public final SwipeRefreshLayout swipeContainer;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final ConstraintLayout topAlert;

  @NonNull
  public final ImageView topAlertCloseBtn;

  @NonNull
  public final ImageView topAlertIcon;

  @NonNull
  public final TextView topAlertTxt;

  private ActivityBaseWebBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ImageView animatedCheck, @NonNull AppBarLayout appBarLayout,
      @NonNull ConstraintLayout bottomAlert, @NonNull ImageView bottomAlertCloseBtn,
      @NonNull ImageView bottomAlertIcon, @NonNull TextView bottomAlertTxt,
      @NonNull BottomNavigationView bottomNavigation, @NonNull ProgressBar progressBar,
      @NonNull CircularProgressView quickDlFeedback, @NonNull SwipeRefreshLayout swipeContainer,
      @NonNull Toolbar toolbar, @NonNull ConstraintLayout topAlert,
      @NonNull ImageView topAlertCloseBtn, @NonNull ImageView topAlertIcon,
      @NonNull TextView topAlertTxt) {
    this.rootView = rootView;
    this.animatedCheck = animatedCheck;
    this.appBarLayout = appBarLayout;
    this.bottomAlert = bottomAlert;
    this.bottomAlertCloseBtn = bottomAlertCloseBtn;
    this.bottomAlertIcon = bottomAlertIcon;
    this.bottomAlertTxt = bottomAlertTxt;
    this.bottomNavigation = bottomNavigation;
    this.progressBar = progressBar;
    this.quickDlFeedback = quickDlFeedback;
    this.swipeContainer = swipeContainer;
    this.toolbar = toolbar;
    this.topAlert = topAlert;
    this.topAlertCloseBtn = topAlertCloseBtn;
    this.topAlertIcon = topAlertIcon;
    this.topAlertTxt = topAlertTxt;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBaseWebBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBaseWebBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_base_web, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBaseWebBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.animated_check;
      ImageView animatedCheck = ViewBindings.findChildViewById(rootView, id);
      if (animatedCheck == null) {
        break missingId;
      }

      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.bottom_alert;
      ConstraintLayout bottomAlert = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlert == null) {
        break missingId;
      }

      id = R.id.bottom_alert_close_btn;
      ImageView bottomAlertCloseBtn = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlertCloseBtn == null) {
        break missingId;
      }

      id = R.id.bottom_alert_icon;
      ImageView bottomAlertIcon = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlertIcon == null) {
        break missingId;
      }

      id = R.id.bottom_alert_txt;
      TextView bottomAlertTxt = ViewBindings.findChildViewById(rootView, id);
      if (bottomAlertTxt == null) {
        break missingId;
      }

      id = R.id.bottom_navigation;
      BottomNavigationView bottomNavigation = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigation == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.quick_dl_feedback;
      CircularProgressView quickDlFeedback = ViewBindings.findChildViewById(rootView, id);
      if (quickDlFeedback == null) {
        break missingId;
      }

      id = R.id.swipe_container;
      SwipeRefreshLayout swipeContainer = ViewBindings.findChildViewById(rootView, id);
      if (swipeContainer == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.top_alert;
      ConstraintLayout topAlert = ViewBindings.findChildViewById(rootView, id);
      if (topAlert == null) {
        break missingId;
      }

      id = R.id.top_alert_close_btn;
      ImageView topAlertCloseBtn = ViewBindings.findChildViewById(rootView, id);
      if (topAlertCloseBtn == null) {
        break missingId;
      }

      id = R.id.top_alert_icon;
      ImageView topAlertIcon = ViewBindings.findChildViewById(rootView, id);
      if (topAlertIcon == null) {
        break missingId;
      }

      id = R.id.top_alert_txt;
      TextView topAlertTxt = ViewBindings.findChildViewById(rootView, id);
      if (topAlertTxt == null) {
        break missingId;
      }

      return new ActivityBaseWebBinding((CoordinatorLayout) rootView, animatedCheck, appBarLayout,
          bottomAlert, bottomAlertCloseBtn, bottomAlertIcon, bottomAlertTxt, bottomNavigation,
          progressBar, quickDlFeedback, swipeContainer, toolbar, topAlert, topAlertCloseBtn,
          topAlertIcon, topAlertTxt);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
