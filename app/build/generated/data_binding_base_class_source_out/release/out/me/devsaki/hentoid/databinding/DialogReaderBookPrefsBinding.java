// Generated by view binder compiler. Do not edit!
package me.devsaki.hentoid.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.skydoves.powerspinner.PowerSpinnerView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import me.devsaki.hentoid.R;

public final class DialogReaderBookPrefsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton actionButton;

  @NonNull
  public final MaterialButton bookPrefsAppPrefsBtn;

  @NonNull
  public final PowerSpinnerView bookPrefsBrowseSpin;

  @NonNull
  public final TextView bookPrefsBrowseTxt;

  @NonNull
  public final PowerSpinnerView bookPrefsDisplaySpin;

  @NonNull
  public final TextView bookPrefsDisplayTxt;

  @NonNull
  public final PowerSpinnerView bookPrefsRenderingSpin;

  @NonNull
  public final TextView bookPrefsRenderingTxt;

  @NonNull
  public final TextView exportTitle;

  private DialogReaderBookPrefsBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton actionButton, @NonNull MaterialButton bookPrefsAppPrefsBtn,
      @NonNull PowerSpinnerView bookPrefsBrowseSpin, @NonNull TextView bookPrefsBrowseTxt,
      @NonNull PowerSpinnerView bookPrefsDisplaySpin, @NonNull TextView bookPrefsDisplayTxt,
      @NonNull PowerSpinnerView bookPrefsRenderingSpin, @NonNull TextView bookPrefsRenderingTxt,
      @NonNull TextView exportTitle) {
    this.rootView = rootView;
    this.actionButton = actionButton;
    this.bookPrefsAppPrefsBtn = bookPrefsAppPrefsBtn;
    this.bookPrefsBrowseSpin = bookPrefsBrowseSpin;
    this.bookPrefsBrowseTxt = bookPrefsBrowseTxt;
    this.bookPrefsDisplaySpin = bookPrefsDisplaySpin;
    this.bookPrefsDisplayTxt = bookPrefsDisplayTxt;
    this.bookPrefsRenderingSpin = bookPrefsRenderingSpin;
    this.bookPrefsRenderingTxt = bookPrefsRenderingTxt;
    this.exportTitle = exportTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogReaderBookPrefsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogReaderBookPrefsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_reader_book_prefs, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogReaderBookPrefsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.action_button;
      MaterialButton actionButton = ViewBindings.findChildViewById(rootView, id);
      if (actionButton == null) {
        break missingId;
      }

      id = R.id.book_prefs_app_prefs_btn;
      MaterialButton bookPrefsAppPrefsBtn = ViewBindings.findChildViewById(rootView, id);
      if (bookPrefsAppPrefsBtn == null) {
        break missingId;
      }

      id = R.id.book_prefs_browse_spin;
      PowerSpinnerView bookPrefsBrowseSpin = ViewBindings.findChildViewById(rootView, id);
      if (bookPrefsBrowseSpin == null) {
        break missingId;
      }

      id = R.id.book_prefs_browse_txt;
      TextView bookPrefsBrowseTxt = ViewBindings.findChildViewById(rootView, id);
      if (bookPrefsBrowseTxt == null) {
        break missingId;
      }

      id = R.id.book_prefs_display_spin;
      PowerSpinnerView bookPrefsDisplaySpin = ViewBindings.findChildViewById(rootView, id);
      if (bookPrefsDisplaySpin == null) {
        break missingId;
      }

      id = R.id.book_prefs_display_txt;
      TextView bookPrefsDisplayTxt = ViewBindings.findChildViewById(rootView, id);
      if (bookPrefsDisplayTxt == null) {
        break missingId;
      }

      id = R.id.book_prefs_rendering_spin;
      PowerSpinnerView bookPrefsRenderingSpin = ViewBindings.findChildViewById(rootView, id);
      if (bookPrefsRenderingSpin == null) {
        break missingId;
      }

      id = R.id.book_prefs_rendering_txt;
      TextView bookPrefsRenderingTxt = ViewBindings.findChildViewById(rootView, id);
      if (bookPrefsRenderingTxt == null) {
        break missingId;
      }

      id = R.id.export_title;
      TextView exportTitle = ViewBindings.findChildViewById(rootView, id);
      if (exportTitle == null) {
        break missingId;
      }

      return new DialogReaderBookPrefsBinding((ConstraintLayout) rootView, actionButton,
          bookPrefsAppPrefsBtn, bookPrefsBrowseSpin, bookPrefsBrowseTxt, bookPrefsDisplaySpin,
          bookPrefsDisplayTxt, bookPrefsRenderingSpin, bookPrefsRenderingTxt, exportTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
